const fs = require("fs-extra");
const path = require("path");

module.exports.config = {
  name: "joinallgc",
  version: "2.0.0",
  hasPermssion: 3,
  credits: "TOHI-BOT-HUB",
  description: "Backup, restore and rejoin approved groups",
  usePrefix: true,
  commandCategory: "admin",
  usages: "backup | restore | rejoin | list",
  cooldowns: 10
};

const OWNER_ID = "100092006324917";

module.exports.run = async function ({ api, event, args }) {
  if (event.senderID !== OWNER_ID) {
    return api.sendMessage(`тЫФя╕П рж╢рзБржзрзБржорж╛рждрзНрж░ owner (${OWNER_ID}) ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи!`, event.threadID, event.messageID);
  }

  const { threadID, messageID } = event;
  const groupsDataPath = path.join(__dirname, '../../includes/database/data/groupsData.json');

  // Initialize groups database if not exists
  if (!fs.existsSync(groupsDataPath)) {
    fs.writeFileSync(groupsDataPath, JSON.stringify({}, null, 2));
  }

  // Load groups database
  let groupsData = {};
  try {
    groupsData = JSON.parse(fs.readFileSync(groupsDataPath, 'utf8'));
  } catch (error) {
    groupsData = {};
  }

  const command = (args[0] || "").toLowerCase();

  try {
    switch (command) {
      case "backup": {
        // Get bot's current groups
        const threadList = await api.getThreadList(100, null, ['INBOX']);
        const botGroups = threadList.filter(thread => thread.isGroup && thread.isSubscribed);

        if (botGroups.length === 0) {
          return api.sendMessage("ЁЯУЭ ржХрзЛржи ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрзЗржУржпрж╝рж╛ ржирзЗржЗ backup ржХрж░рж╛рж░ ржЬржирзНржп!", threadID, messageID);
        }

        const currentTime = new Date().toLocaleString("bn-BD", {
          timeZone: "Asia/Dhaka"
        });

        let backupCount = 0;

        // Backup each group
        for (const group of botGroups) {
          try {
            const threadInfo = await api.getThreadInfo(group.threadID);

            // Store group data in groupsData.json
            groupsData[group.threadID] = {
              threadID: group.threadID,
              threadName: threadInfo.threadName || "Unknown Group",
              memberCount: threadInfo.participantIDs ? threadInfo.participantIDs.length : 0,
              isApproved: true,
              isPending: false,
              isRejected: false,
              backupDate: currentTime,
              status: "auto_backed_up",
              adminList: threadInfo.adminIDs || [],
              lastUpdated: currentTime,
              settings: {
                allowCommands: true,
                autoApprove: false
              }
            };

            backupCount++;

            // Add delay to prevent rate limiting
            await new Promise(resolve => setTimeout(resolve, 1000));

          } catch (error) {
            console.log(`Backup failed for group ${group.threadID}: ${error.message}`);
          }
        }

        // Save groups database
        fs.writeFileSync(groupsDataPath, JSON.stringify(groupsData, null, 2), 'utf8');

        const successMsg = `тЬЕ BACKUP рж╕ржорзНржкрзВрж░рзНржг рж╣ржпрж╝рзЗржЫрзЗ!
ЁЯУК ржорзЛржЯ ржЧрзНрж░рзБржк: ${backupCount}ржЯрж┐
ЁЯУЕ ржмрзНржпрж╛ржХржЖржк рж╕ржоржпрж╝: ${currentTime}
ЁЯТ╛ рж╕рзЗржн рж▓рзЛржХрзЗрж╢ржи: groupsData.json

ЁЯУЭ Note: рж╕ржм ржЧрзНрж░рзБржкрзЗрж░ ржбрзЗржЯрж╛ groupsData.json ржП рж╕рзЗржн ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред`;

        return api.sendMessage(successMsg, threadID, messageID);
      }

      case "restore": {
        const approvedGroups = Object.values(groupsData).filter(group => group.isApproved);

        if (approvedGroups.length === 0) {
          return api.sendMessage("ЁЯУЭ ржХрзЛржи approved ржЧрзНрж░рзБржк ржбрзЗржЯрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ restore ржХрж░рж╛рж░ ржЬржирзНржп!", threadID, messageID);
        }

        let restoreMsg = `ЁЯУЛ RESTORE INFORMATION:\n\n`;
        restoreMsg += `тЬЕ ржорзЛржЯ approved ржЧрзНрж░рзБржк: ${approvedGroups.length}ржЯрж┐\n\n`;

        approvedGroups.forEach((group, index) => {
          restoreMsg += `${index + 1}. ${group.threadName}\n`;
          restoreMsg += `   ID: ${group.threadID}\n`;
          restoreMsg += `   Members: ${group.memberCount}\n`;
          restoreMsg += `   Backup: ${group.backupDate}\n\n`;
        });

        restoreMsg += `ЁЯТб ржПржЗ ржЧрзНрж░рзБржкржЧрзБрж▓рзЛрждрзЗ rejoin ржХрж░рждрзЗ "joinallgc rejoin" ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред`;

        return api.sendMessage(restoreMsg, threadID, messageID);
      }

      case "rejoin": {
        const approvedGroups = Object.values(groupsData).filter(group => group.isApproved);

        if (approvedGroups.length === 0) {
          return api.sendMessage("ЁЯУЭ ржХрзЛржи approved ржЧрзНрж░рзБржк ржбрзЗржЯрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ rejoin ржХрж░рж╛рж░ ржЬржирзНржп!", threadID, messageID);
        }

        api.sendMessage(`ЁЯФД ${approvedGroups.length}ржЯрж┐ ржЧрзНрж░рзБржкрзЗ rejoin рж╢рзБрж░рзБ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...`, threadID);

        const results = [];
        let successCount = 0;
        let failCount = 0;

        for (const group of approvedGroups) {
          try {
            // Check if bot is already in the group
            const threadInfo = await api.getThreadInfo(group.threadID);
            const botUserID = api.getCurrentUserID();

            if (threadInfo.participantIDs.includes(botUserID)) {
              results.push(`тЬЕ ${group.threadName} - Already joined`);
              successCount++;
            } else {
              // Note: Auto-joining requires invitation from group members
              results.push(`тП│ ${group.threadName} - Rejoin attempt (manual invitation may be needed)`);

              // Update group status in database
              groupsData[group.threadID] = {
                ...groupsData[group.threadID],
                lastRejoinAttempt: new Date().toLocaleString("bn-BD", { timeZone: "Asia/Dhaka" }),
                rejoinStatus: "attempted"
              };
            }

            // Add delay to prevent rate limiting
            await new Promise(resolve => setTimeout(resolve, 2000));

          } catch (error) {
            results.push(`тЭМ ${group.threadName} - Rejoin failed`);
            failCount++;
          }
        }

        // Save updated groups database
        fs.writeFileSync(groupsDataPath, JSON.stringify(groupsData, null, 2), 'utf8');

        const resultMsg = `ЁЯОп REJOIN RESULTS:\n\n${results.join('\n')}\n\nтЬЕ Success: ${successCount}\nтЭМ Failed: ${failCount}\n\nЁЯТб Note: Bot can only join groups through manual invitation by group members.`;

        return api.sendMessage(resultMsg, threadID, messageID);
      }

      case "list": {
        const allGroups = Object.values(groupsData);
        const approvedGroups = allGroups.filter(group => group.isApproved);
        const pendingGroups = allGroups.filter(group => group.isPending);
        const rejectedGroups = allGroups.filter(group => group.isRejected);

        let listMsg = `ЁЯУК GROUP DATABASE STATUS:\n\n`;
        listMsg += `тЬЕ Approved: ${approvedGroups.length}\n`;
        listMsg += `тП│ Pending: ${pendingGroups.length}\n`;
        listMsg += `тЭМ Rejected: ${rejectedGroups.length}\n`;
        listMsg += `ЁЯУБ Total: ${allGroups.length}\n\n`;

        if (approvedGroups.length > 0) {
          listMsg += `тЬЕ APPROVED GROUPS:\n`;
          approvedGroups.slice(0, 10).forEach((group, index) => {
            listMsg += `${index + 1}. ${group.threadName}\n`;
          });
          if (approvedGroups.length > 10) {
            listMsg += `... ржПржмржВ ржЖрж░рзЛ ${approvedGroups.length - 10}ржЯрж┐\n`;
          }
        }

        listMsg += `\nЁЯТ╛ Data stored in: groupsData.json`;

        return api.sendMessage(listMsg, threadID, messageID);
      }

      default: {
        const helpMsg = `ЁЯУЛ JOINALLGC COMMANDS:

ЁЯФД joinallgc backup
   - ржмрж░рзНрждржорж╛ржи ржЧрзНрж░рзБржкржЧрзБрж▓рзЛ backup ржХрж░рзБржи

ЁЯУЛ joinallgc restore  
   - Backup ржХрж░рж╛ ржЧрзНрж░рзБржкрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрзБржи

ЁЯФД joinallgc rejoin
   - Backup ржХрж░рж╛ ржЧрзНрж░рзБржкржЧрзБрж▓рзЛрждрзЗ rejoin ржХрж░рзБржи

ЁЯУК joinallgc list
   - ржЧрзНрж░рзБржк database рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржжрзЗржЦрзБржи

ЁЯТ╛ рж╕ржм ржбрзЗржЯрж╛ groupsData.json ржП рж╕рзЗржн рж╣ржпрж╝`;

        return api.sendMessage(helpMsg, threadID, messageID);
      }
    }

  } catch (error) {
    console.error("JoinAllGC Error:", error);
    return api.sendMessage(`тЭМ Error: ${error.message}`, threadID, messageID);
  }
};