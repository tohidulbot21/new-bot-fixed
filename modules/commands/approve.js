module.exports.config = {
  name: "approve",
  version: "2.0.0",
  permission: 2,
  usePrefix: true,
  credits: "TOHIDUL (Easy Bangla Edition)",
  description: "Owner approval system тАФ approved ржЫрж╛рзЬрж╛ ржХрзЛржирзЛ ржЧрзНрж░рзБржкрзЗ ржмржЯ ржХрж╛ржЬ ржХрж░ржмрзЗ ржирж╛ред",
  commandCategory: "Admin",
  usages: "/approve [list|pending|help|reject <groupID>]",
  cooldowns: 5
};

const OWNER_ID = "100092006324917";

module.exports.run = async function ({ api, event, args }) {
  const logger = require("../../utils/log.js");
  if (event.senderID !== OWNER_ID) {
    return api.sendMessage(`тЫФя╕П ржХрзЗржмрж▓ owner (${OWNER_ID}) approval ржжрж┐рждрзЗ ржкрж╛рж░ржмрзЗржи!`, event.threadID, event.messageID);
  }

  const { threadID, messageID } = event;
  const Groups = require('../../includes/database/groups')({ api });

  const command = (args[0] || "").toLowerCase();

  try {
    switch (command) {
      case "help": {
        const helpMsg = `ЁЯУЛ APPROVE COMMAND HELP:

ЁЯФ╕ /approve тАФ ржмрж░рзНрждржорж╛ржи ржЧрзНрж░рзБржк approve ржХрж░рзБржи
ЁЯФ╕ /approve list тАФ рж╕ржм approved ржЧрзНрж░рзБржкрзЗрж░ рж▓рж┐рж╕рзНржЯ
ЁЯФ╕ /approve pending тАФ pending ржЧрзНрж░рзБржкрзЗрж░ рж▓рж┐рж╕рзНржЯ
ЁЯФ╕ /approve reject <groupID> тАФ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЧрзНрж░рзБржк reject ржХрж░рзБржи
ЁЯФ╕ /approve help тАФ ржПржЗ help ржорзЗрж╕рзЗржЬ

ЁЯТб Note: рж╢рзБржзрзБ owner ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред`;
        return api.sendMessage(helpMsg, threadID, messageID);
      }

      case "list": {
        const approvedGroups = Groups.getByStatus('approved');

        if (approvedGroups.length === 0) {
          return api.sendMessage("ЁЯУЭ ржХрзЛржирзЛ approved ржЧрзНрж░рзБржк ржирзЗржЗ!", threadID, messageID);
        }

        let msg = `тЬЕ APPROVED GROUPS (${approvedGroups.length}):\n\n`;

        for (let i = 0; i < Math.min(approvedGroups.length, 15); i++) {
          const group = approvedGroups[i];
          msg += `${i + 1}. ${group.threadName || 'Unknown Group'}\n`;
          msg += `   ЁЯЖФ ${group.threadID}\n`;
          msg += `   ЁЯСе ${group.memberCount || 0} members\n`;
          msg += `   ЁЯУЕ Approved: ${new Date(group.approvedAt || group.lastUpdated).toLocaleDateString('bn-BD')}\n\n`;
        }

        if (approvedGroups.length > 15) {
          msg += `... ржПржмржВ ржЖрж░ржУ ${approvedGroups.length - 15}ржЯрж┐ ржЧрзНрж░рзБржк`;
        }

        return api.sendMessage(msg, threadID, messageID);
      }

      case "pending": {
        const pendingGroups = Groups.getByStatus('pending');

        if (pendingGroups.length === 0) {
          return api.sendMessage("ЁЯУЭ ржХрзЛржирзЛ pending ржЧрзНрж░рзБржк ржирзЗржЗ!", threadID, messageID);
        }

        let msg = `тП│ PENDING GROUPS (${pendingGroups.length}):\n\n`;

        for (let i = 0; i < Math.min(pendingGroups.length, 10); i++) {
          const group = pendingGroups[i];
          msg += `${i + 1}. ${group.threadName || 'Unknown Group'}\n`;
          msg += `   ЁЯЖФ ${group.threadID}\n`;
          msg += `   ЁЯСе ${group.memberCount || 0} members\n`;
          msg += `   ЁЯУЕ Pending since: ${new Date(group.pendingAt || group.createdAt).toLocaleDateString('bn-BD')}\n\n`;
        }

        if (pendingGroups.length > 10) {
          msg += `... ржПржмржВ ржЖрж░ржУ ${pendingGroups.length - 10}ржЯрж┐ ржЧрзНрж░рзБржк`;
        }

        return api.sendMessage(msg, threadID, messageID);
      }

      case "reject": {
        const targetID = args[1];
        if (!targetID) {
          return api.sendMessage("тЭМ Group ID ржжрж┐ржи!\nExample: /approve reject 12345", threadID, messageID);
        }

        const success = Groups.rejectGroup(targetID);
        if (success) {
          const groupData = Groups.getData(targetID);
          const groupName = groupData ? groupData.threadName : 'Unknown Group';

          api.sendMessage(`тЭМ Group "${groupName}" reject ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!`, threadID, messageID);

          // Notify the group
          try {
            api.sendMessage(
              `тЭМ ржПржЗ ржЧрзНрж░рзБржкржЯрж┐ admin ржжрзНржмрж╛рж░рж╛ reject ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред\n\n` +
              `ЁЯЪл Bot ржПрж░ ржХрзЛржирзЛ command ржЖрж░ ржХрж╛ржЬ ржХрж░ржмрзЗ ржирж╛ред\n` +
              `ЁЯУЮ ржЖрж░рзЛ рждржерзНржпрзЗрж░ ржЬржирзНржп admin ржПрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред`,
              targetID
            );
          } catch (error) {
            console.log('Could not notify rejected group:', error.message);
          }
        } else {
          api.sendMessage("тЭМ Group reject ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ!", threadID, messageID);
        }
        break;
      }

      default: {
        // Default action: approve current group
        const targetID = threadID; // Always use current thread ID

        if (Groups.isApproved(targetID)) {
          return api.sendMessage("тЬЕ ржПржЗ ржЧрзНрж░рзБржк ржЗрждрж┐ржоржзрзНржпрзЗ approved!", threadID, messageID);
        }

        // Get or create group data
        let groupData = Groups.getData(targetID);
        if (!groupData) {
          groupData = await Groups.createData(targetID);
        }

        // Approve the group
        const success = Groups.approveGroup(targetID);

        if (success) {
          const groupName = groupData ? groupData.threadName : "Unknown Group";

          api.sendMessage(
            `ЁЯОЙ Group "${groupName}" successfully approved!\n\n` +
            `тЬЕ Bot commands ржПржЦржи activeред\n` +
            `ЁЯУЭ Type ${global.config.PREFIX || '/'}help to see available commands.\n` +
            `ЁЯСС Bot Admin: ${OWNER_ID}`,
            threadID, messageID
          );

        } else {
          api.sendMessage("тЭМ Group approve ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ!", threadID, messageID);
        }
      }
    }
  } catch (error) {
    console.error("Approve command error:", error);
    return api.sendMessage("тЭМ ржХрж┐ржЫрзБ ржнрзБрж▓ рж╣ржпрж╝рзЗржЫрзЗ! ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред", threadID, messageID);
  }
};