const axios = require("axios");

const baseApiUrl = async () => {
  const base = await axios.get(
    `https://raw.githubusercontent.com/Blankid018/D1PT0/main/baseApiUrl.json`
  );
  return base.data.api;
};

module.exports = {
  config: {
    name: "quiz",
    version: "1.2",
    credits: "Dipto, styled by TOHIDUL",
    cooldowns: 0,
    hasPermssion: 0,
    commandCategory: "game",
    usePrefix: true,
    prefix: true,
    usages: "{p}quiz\n{pn}quiz bn\n{p}quiz en",
  },

  run: async function ({ api, event, args }) {
    const input = args.join('').toLowerCase() || "bn";
    let timeout = 300;
    let category = "bangla";
    if (input === "bn" || input === "bangla") category = "bangla";
    else if (input === "en" || input === "english") category = "english";

    try {
      const response = await axios.get(
        `${await baseApiUrl()}/quiz?category=${category}&q=random`
      );
      const quizData = response.data.question;
      const { question, correctAnswer, options } = quizData;
      const { a, b, c, d } = options;
      const uid = event.senderID;

      // Safe user name retrieval with fallback
      let namePlayerReact;
      try {
        const userInfo = await api.getUserInfo(uid);
        namePlayerReact = userInfo && userInfo[uid] && userInfo[uid].name ? userInfo[uid].name : `User-${uid.slice(-6)}`;
      } catch (error) {
        console.log(`Error getting user info for ${uid}: ${error.message}`);
        namePlayerReact = `User-${uid.slice(-6)}`;
      }

      const quizMsg = {
        body:
`‚ï≠‚îÄ‚ùñ‚îÅ‚îÅ‚ùñ[ ùë∏ùëºùë∞ùíÅ ùëªùë∞ùë¥ùë¨ ]‚ùñ‚îÅ‚îÅ‚ùñ‚îÄ‚ïÆ
üîÆ  ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ${question}

1Ô∏è‚É£) ${a}
2Ô∏è‚É£) ${b}
3Ô∏è‚É£) ${c}
4Ô∏è‚É£) ${d}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üì© ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶è‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡¶®! (1/2/3/4)
‚è≥ ‡¶∏‡¶Æ‡¶Ø‡¶º: ${timeout} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°

üë§ ‡¶ñ‡ßá‡¶≤‡ßã‡¶Ø‡¶º‡¶æ‡¶°‡¶º: @${namePlayerReact}
‚ú® ‡¶∂‡ßÅ‡¶≠‡¶ï‡¶æ‡¶Æ‡¶®‡¶æ!
`,
        mentions: [{
          tag: `@${namePlayerReact}`,
          id: uid
        }]
      };

      api.sendMessage(
        quizMsg,
        event.threadID,
        (error, info) => {
          if (error) {
            console.log("Error sending quiz message:", error);
            return;
          }
          global.client.handleReply.push({
            type: "reply",
            name: this.config.name,
            author: event.senderID,
            messageID: info.messageID,
            dataGame: quizData,
            correctAnswer,
            nameUser: namePlayerReact,
            attempts: 0
          });
          setTimeout(() => {
            api.unsendMessage(info.messageID);
          }, timeout * 1000);
        },
        event.messageID,
      );
    } catch (error) {
      console.log("‚ùå | Error occurred:", error);
      api.sendMessage("‡¶ï‡ßÅ‡¶á‡¶ú ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá! ‡¶™‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", event.threadID, event.messageID);
    }
  },

  handleReply: async function({ event, api, handleReply, Users }) {
    const { correctAnswer, nameUser, author } = handleReply;
    const prefix = global.config.PREFIX || "/";

    if (event.senderID !== author)
      return api.sendMessage(
        "‚õî ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶á ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá!", event.threadID, event.messageID
      );

    const maxAttempts = 2;

    switch (handleReply.type) {
      case "reply": {
        let userReply = event.body.trim();

        // Convert numbers to corresponding letters for API compatibility
        const numberToLetter = { "1": "a", "2": "b", "3": "c", "4": "d" };

        if (["1", "2", "3", "4"].includes(userReply)) {
          userReply = numberToLetter[userReply];
        } else {
          // If user still uses letters, convert to lowercase
          userReply = userReply.toLowerCase();
          let normalized = userReply[0];
          if (["a","b","c","d"].includes(normalized)) userReply = normalized;
          // Also allow Bengali equivalents
          else if (["‡¶è", "‡¶¨‡¶ø", "‡¶∏‡¶ø", "‡¶°‡¶ø"].includes(userReply[0])) {
            userReply = { "‡¶è": "a", "‡¶¨‡¶ø": "b", "‡¶∏‡¶ø": "c", "‡¶°‡¶ø": "d" }[userReply[0]];
          }
        }

        if (handleReply.attempts >= maxAttempts) {
          await api.unsendMessage(handleReply.messageID);
          // Convert correct answer letter to number for display
          const letterToNumber = { "a": "1", "b": "2", "c": "3", "d": "4" };
          const correctNumber = letterToNumber[correctAnswer.toLowerCase()] || correctAnswer;

          const incorrectMsg =
`‚õî @${nameUser}, ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ (${maxAttempts}) ‡¶ï‡¶∞‡ßá ‡¶´‡ßá‡¶≤‡ßá‡¶õ‡ßã!
‚úÖ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶õ‡¶ø‡¶≤: ${correctNumber}

üîÅ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶®‡¶ø‡¶§‡ßá ${prefix}quiz ‡¶≤‡¶ø‡¶ñ‡ßã!`;
          return api.sendMessage({
            body: incorrectMsg,
            mentions: [{
              tag: `@${nameUser}`,
              id: author
            }]
          }, event.threadID, event.messageID);
        }

        if (userReply === correctAnswer.toLowerCase()) {
          api.unsendMessage(handleReply.messageID).catch(console.error);
          let rewardCoins = 200;
          let rewardExp = 100;

          try {
            let userData = await Users.getData(author);
            if (userData) {
              await Users.setData(author, {
                money: (userData.money || 0) + rewardCoins,
                exp: (userData.exp || 0) + rewardExp,
                data: userData.data || {},
              });
            }
          } catch (error) {
            console.log("Error updating user data:", error);
          }

          let correctMsg =
`üéâ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®, @${nameUser}! üåü
‚úÖ ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞! ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶ö‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™‡¶ø‡¶Ø‡¶º‡¶®! üèÜ

üí∞ ‡¶™‡ßÅ‡¶∞‡¶∏‡ßç‡¶ï‡¶æ‡¶∞: ${rewardCoins} ‡¶ï‡¶Ø‡¶º‡ßá‡¶®
‚ö° ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ: ${rewardExp} XP

‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßÅ‡¶á‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø: ${prefix}quiz
`;
          api.sendMessage({
            body: correctMsg,
            mentions: [{
              tag: `@${nameUser}`,
              id: author
            }]
          }, event.threadID, event.messageID);
        } else {
          handleReply.attempts += 1;
          api.sendMessage(
`‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞! 
üîÅ ‡¶Ü‡¶∞‡¶ì ${maxAttempts - handleReply.attempts} ‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã‡•§ 
‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã!`, event.threadID, event.messageID
          );
        }
        break;
      }
      default:
        break;
    }
  },
};